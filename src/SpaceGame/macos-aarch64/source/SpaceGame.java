/* autogenerated by Processing revision 1286 on 2025-10-21 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SpaceGame extends PApplet {

// Gabriel Farley | 18 Sept 2025 | SpaceGame
SpaceShip s1;
ArrayList<PowerUp> powups = new ArrayList<PowerUp>();
ArrayList<Rock> rocks = new ArrayList<Rock>();
//ArrayList<LRock> lrocks = new ArrayList<LRock>();
ArrayList<Laser> lasers = new ArrayList<Laser>();
ArrayList<Star> stars = new ArrayList<Star>();
Timer rockTimer, puTimer;
int score, rocksPassed, turpow;
boolean play;
//setup and draw only exist inside tab1
 public void setup() {
  /* size commented out by preprocessor */;
  background(22);
  s1 = new SpaceShip();
  puTimer = new Timer(5000);
  puTimer.start();
  rockTimer = new Timer (1000);
  rockTimer.start();
  score = 0;
  rocksPassed = 0;
  turpow = 25;
}

 public void draw() {
  if (!play) {
    startScreen();
  } else {
    background(0, 0, 10);

    //distributes Power Ups on a timer
    if (puTimer.isFinished()) {
      powups.add(new PowerUp());
      puTimer.start();
    }

    //display PowerUps
    for (int i = 0; i < powups.size(); i++) {
      PowerUp pu = powups.get(i);
      pu.display();
      pu.move();
      // collision detection pu and ship
      if (pu.intersect(s1)) {
        powups.remove(pu);
        //based on type, benefit player
        if (pu.type == 'H') {
          s1.health = s1.health +2;
        } else if (pu.type == 'T') {
          s1.turretCount = s1.turretCount +1;
          turpow = 20;
          if (s1.turretCount>5) {
            s1.turretCount = 5;
          }
        } else if (pu.type == 'A') {
          s1.laserCount = s1.laserCount +20;
        }
      }
      if (pu.reachBottom()) {
        powups.remove(pu);
        i--;
      }
    }

    //removing turrets after 20 shots
    if (turpow<1) {
      s1.turretCount = s1.turretCount - 1;
      turpow = 20;
      if (s1.turretCount <1) {
        s1.turretCount = 1;
      }
    }

    // Adding Stars
    stars.add(new Star());

    //display Stars
    for (int i = 0; i < stars.size(); i++) {
      Star star = stars.get(i);
      star.display();
      star.move();
      if (star.reachedBottom()) {
        stars.remove(star);
        i--;
      }
    }

    //Distribute Rocks
    if (rockTimer.isFinished()) {
      rocks.add(new Rock());
      rockTimer.start();
    }

    //display Rocks
    for (int i = 0; i < rocks.size(); i++) {
      Rock r1 = rocks.get(i);
      r1.display();
      r1.move();
      // collision detection rock and ship
      if (s1.intersect(r1)) {
        rocks.remove(r1);
        s1.health = s1.health - 1;
        s1.turretCount = 1;
      }
      if (r1.reachBottom()) {
        rocks.remove(r1);
        i--;
        rocksPassed++;
      }
    }
    ////Distribute LRocks
    //if (lrockTimer.isFinished()) {
    //  lrocks.add(new Rock());
    //  lrockTimer.start();
    //}

    ////display LRocks
    //for (int i = 0; i < lrocks.size(); i++) {
    //  LRock lr1 = lrocks.get(i);
    //  lr1.display();
    //  lr1.move();
    //  // collision detection rock and ship
    //  if (s1.intersect(lr1)) {
    //    rocks.remove(lr1);
    //    s1.health = s1.health - 1;
    //    s1.turretCount = 1;
    //  }
    //  if (lr1.reachBottom()) {
    //    rocks.remove(lr1);
    //    i--;
    //    rocksPassed++;
    //  }
    //}

    //Displays lasers / removes unwanted lasers
    for (int i = 0; i < lasers.size(); i++) {
      Laser laser = lasers.get(i);
      for (int j=0; j<rocks.size(); j++) {
        Rock r = rocks.get(j);
        if (laser.intersect(r)) {
          r.diam = r.diam -30;
          if (r.diam<5) {
            rocks.remove(r);
            score = score+1;
          }
          //remove laser :(
          lasers.remove(laser);
          // effect score
        }
        laser.display();
        laser.move();
        if (laser.reachedTop()) {
          lasers.remove(laser);
        }
        println(lasers.size());
      }
    }

    //println(rocks.size());

    s1.display();
    s1.move(mouseX, mouseY);
    infoPanel();
    if (s1.health<=0) {
      gameOver();
    }
  }
}
 public void mousePressed() {
  if (s1.fire()) {
    if (s1.turretCount==1) {
      lasers.add(new Laser(s1.x, s1.y-50));
      s1.laserCount--;
      turpow--;
    } else if (s1.turretCount==2) {
      lasers.add(new Laser(s1.x, s1.y-50));
      lasers.add(new Laser(s1.x+3, s1.y-50));
      s1.laserCount--;
      turpow--;
    } else if (s1.turretCount==3) {
      lasers.add(new Laser(s1.x, s1.y-50));
      lasers.add(new Laser(s1.x+3, s1.y-50));
      lasers.add(new Laser(s1.x - 3, s1.y-50));
      s1.laserCount--;
      turpow--;
    } else if (s1.turretCount==4) {
      lasers.add(new Laser(s1.x, s1.y-50));
      lasers.add(new Laser(s1.x+3, s1.y-50));
      lasers.add(new Laser(s1.x - 3, s1.y-50));
      lasers.add(new Laser(s1.x - 6, s1.y-50));
      s1.laserCount--;
      turpow--;
    } else if (s1.turretCount==5) {
      lasers.add(new Laser(s1.x, s1.y-50));
      lasers.add(new Laser(s1.x+3, s1.y-50));
      lasers.add(new Laser(s1.x - 3, s1.y-50));
      lasers.add(new Laser(s1.x - 6, s1.y-50));
      lasers.add(new Laser(s1.x + 6, s1.y-50));
      s1.laserCount--;
      turpow--;
    }
  }
}

 public void infoPanel() {
  rectMode(CENTER);
  fill(100, 100);
  rect(width/2, height-25, width, 50);
  fill(225);
  textSize(25);
  text("Score:" +score, 20, 40);
  text("ROCKS PASSED:" + rocksPassed, width-300, 40);
  text("Health:" +s1.health, 350, height-20);
  text("Ammo:" +s1.laserCount, 100, height-20);
  text("Turrets:" +s1.turretCount, 220, height-20);
  //fill(255, 0, 0);
  //rect(50,height-100,s1.health,10);
  //The Two lines above set up a health bar!
}
 public void startScreen() {
  background(0);
  fill(255);
  textAlign(CENTER);
  text("Click your mouse to start!", width/2, height/2);
  if (mousePressed) {
    play = true;
  }
}
 public void gameOver() {
  fill(0, 0, 0);
  rect(0, 0, 5000, 5000);
  fill(255);
  textAlign(CENTER);
  text("Game Over", width/2, height/2);
  text("You got a score of: " + score, width/2, 150);
  noLoop();
}
class LRock {
  //Member Variables
  int x, y, diam, speed, rockhealth;
  PImage lr1;

  //Constructor
  LRock() {
    x = PApplet.parseInt(random(width));
    y = -100;
    diam = PApplet.parseInt(random(90, 130));
    speed = PApplet.parseInt(random(1, 2));
    lr1 = loadImage("rock1.png");
  }

  //Member Methods
   public void display() {
    imageMode(CENTER);
    image(lr1, x, y);
    lr1.resize(diam,diam);
  }

   public void move() {
    y = y + speed;
  }

   public void fire() {
  }

   public boolean reachBottom() {
    if(y>height+diam+4) {
      return true;
    } else {
      return false;
    }
  }
}
class Laser {
  //Member Variables
  //health, speed, ammo, lives;  boolean shield;  color c;
  int x, y, w, h, speed;
  PImage Laser;

  //Constructor
  Laser(int x, int y) {
    this.x = x;
    this.y = y;
    w = 5;
    h = 10;
    speed = 5;
    Laser = loadImage("Laser.png");
  }

  //Member Methods
   public void move() {
    y = y-speed;
  }
   public void display() {
    imageMode(CENTER);
    image(Laser, x, y);
  }
   public void fire() {
  }

   public boolean reachedTop() {
    if (y<-20) {
      return true;
    } else {
      return false;
    }
  }

   public boolean intersect(Rock r) {
    float d = dist(x,y,r.x,r.y);
    if(d<40) {
      return true;
    } else {
      return false;
    }
  }
}
class PowerUp {
  //Member Variables
  int x, y, diam, speed;
  char type;
  int c1;
  //PImage r1;

  //Constructor
  PowerUp() {
    x = PApplet.parseInt(random(width));
    y = -100;
    diam = 100;
    speed = 4;
    if (random(10)>8.6f) {
      // r1 = loadImage("rock1.png");
      type = 'H';
      c1 = color(150, 240, 200);
    } else if (random(10)>5.3f) {
      //r1 = loadImage("rock2.png");
      type = 'T';
      c1 = color(233, 150, 180);
    } else {
      //r/1 = loadImage("rock3.png");
      type = 'A';
      c1 = color(20, 50, 180);
    }
  }

  //Member Methods
   public void display() {
    fill(c1);
    ellipse(x, y, diam, diam);
    fill(20, 20, 200);
    textSize(20);
    textAlign(CENTER);
    text(type, x, y);
  }

   public void move() {
    y = y + speed;
  }

   public void fire() {
  }

   public boolean intersect(SpaceShip r) {
    float d = dist(x, y, r.x, r.y);
    if (d<40) {
      return true;
    } else {
      return false;
    }
  }

   public boolean reachBottom() {
    if (y>height+diam+4) {
      return true;
    } else {
      return false;
    }
  }
}
class Rock {
  //Member Variables
  int x, y, diam, speed;
  PImage r1;

  //Constructor
  Rock() {
    x = PApplet.parseInt(random(width));
    y = -100;
    diam = PApplet.parseInt(random(50, 90));
    speed = PApplet.parseInt(random(3, 6));
    if (random(10)>6.6f) {
      r1 = loadImage("rock1.png");
    } else if (random(10)>3.3f) {
      r1 = loadImage("rock2.png");
    } else {
      r1 = loadImage("rock3.png");
    }
  }

  //Member Methods
   public void display() {
    imageMode(CENTER);
    image(r1, x, y);
    r1.resize(diam,diam);
    
  }

   public void move() {
    y = y + speed;
  }

   public void fire() {
  }

   public boolean reachBottom() {
    if(y>height+diam+4) {
      return true;
    } else {
      return false;
    }
  }
}
class SpaceShip {
  //Member Variables
  //health, speed, ammo, lives;  boolean shield;  color c;
  int x, y, w, health, laserCount, turretCount;
  //PImage ship;

  //Constructor
  SpaceShip() {
    x = width/2;
    y = height/2;
    w = 100;
    health = 3;
    laserCount =50;
    turretCount = 1;
    //ship = loadImage("");
  }

  //Member Methods
   public void display() {
    //imageMode(CENTER);
    //image(ship,x,y);
    fill(70, 60, 120);
    stroke(300);
    strokeWeight(4);
    line(x-25, y+30, x-25, y-30);
    rectMode(CENTER);
    rect(x, y+15, 45, 10);
    triangle(x, y-50, x-10, y+20, x+10, y+20);
    rect(x+20, y, 5, 30);
    rect(x-20, y, 5, 30);
    triangle(x-20, y+50, x-22, y+20, x-16, y+20);
    triangle(x+20, y+50, x+22, y+20, x+16, y+20);
    triangle(x, y+40, x-10, y+20, x+10, y+20);
    fill(200, 120, 250);
    triangle(x, y-10, x, y+8, x+6, y+10);
    triangle(x, y-10, x, y+8, x-6, y+10);
    fill(250, 40, 150);
    triangle(x-23, y-15, x-17, y-15, x-20, y-30);
    triangle(x+23, y-15, x+17, y-15, x+20, y-30);
  }

   public void move(int x, int y) {
    this.x = x;
    this.y = y;
  }

   public boolean fire() {
    if (laserCount>0) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect(LRock lr1) {
    float d = dist(s1.x, s1.y, lr1.x, lr1.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }

   public boolean intersect(Rock r1) {
    float d = dist(s1.x, s1.y, r1.x, r1.y);
    if (d<40) {
      return true;
    } else {
      return false;
    }
  }
}
class Star {
  //member variables
  int x, y, w, speed;
  Star() {
    x = PApplet.parseInt(random (width));
    y = -10;
    w = PApplet.parseInt(random(2, 10));
    speed = PApplet.parseInt(random(2, 8));
  }
   public void display() {
    fill(random(90, 200), random(100, 150), random(200, 255));
    ellipse(x, y, w, w);
  }
   public void move() {
    y = y + speed;
  }

   public boolean reachedBottom() {
    if (y>height+10) {
      return true;
    } else {
      return false;
    }
  }
}
class Timer {
  int savedTime;
  // When Timer started
  int totalTime;
  // How long Timer should last

  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
   public void start() {
  // When the timer starts it stores the current time in milliseconds.
  savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed.
  // The work of the timer is farmed out to this method.
   public boolean isFinished() {
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) { 
      return true;
    } else {
      return false;
    }
  }
}


  public void settings() { size(500, 500); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SpaceGame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
